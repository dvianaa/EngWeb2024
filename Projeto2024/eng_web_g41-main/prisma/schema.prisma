// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    content     String

    likes       Like[]
    comments    Comment[]

    ruaID       String
    rua         Rua    @relation(fields: [ruaID], references: [id])

    @@index([createdById])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    role        String
}

model User {
    id            String    @id @default(cuid())
    username      String    @unique
    name          String?
    surname       String?
    email         String?   @unique
    password      String
    role         String    @default("user")
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    likes         Like[]
    comments      Comment[]
    posts         Post[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    body      String
    postId    String
    userId    String
    post      Post @relation(fields: [postId], references: [id])
    user      User @relation(fields: [userId], references: [id])

    @@index([postId])
    @@index([userId])
}

model Like {
    username String
    postId String
    user   User   @relation(fields: [username], references: [username])
    post   Post   @relation(fields: [postId], references: [id])

    @@id([username, postId])
    @@index([postId])
    @@index([username])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Rua {
  id        String   @id @default(uuid())
  nome      String
  concelho  String
  freguesia String
  descricao String
  figuras   Figura[]
  casas     Casa[]
  posts     Post[]
}

model Figura {
  id      String @id @default(uuid())
  nome    String
  path    String
  legenda String
  ruaId   String
  rua     Rua    @relation(fields: [ruaId], references: [id])
}

model Casa {
  id        String @id @default(uuid())
  numero    String
  enfiteuta String
  foro      String
  descricao String
  ruaId     String
  rua       Rua    @relation(fields: [ruaId], references: [id])
}
